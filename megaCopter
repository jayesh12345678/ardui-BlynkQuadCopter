#include<Wire.h>
#include <SoftwareSerial.h>
#include <ESP8266_Lib.h>
#include <BlynkSimpleShieldEsp8266.h>
#include <Servo.h>//Using servo library to control ESC
#define BLYNK_PRINT Serial
#define EspSerial Serial

char auth[] = "4278e2e01f274e26b25a67129b66abbe";//Blynk token
Servo esc1,esc2,esc3,esc4;
Servo pump;
int val1,Amode = 0,pitch_roll = 50;
int actSpeed[4];
// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "FL-Commando ESP";
char pass[] = "password";

// Hardware Serial on Mega, Leonardo, Micro...


// or Software Serial on Uno, Nano...

//SoftwareSerial EspSerial;  // RX, TX

// Your ESP8266 baud rate:
#define ESP8266_BAUD 115200
ESP8266 wifi(&EspSerial);
const int analogPin = A0;
const int ledPin = 13;
const int threshold = 400;
int targetSpeed[4],pitch_cal,roll_cal;
const int MPU = 0x68;
int x=0,t = 0,dt = 1;
int AcX,AcY,AcZ,GyX,GyY,GyZ,tmp;
int AcXo,AcYo,AcZo,GyXo,GyYo,GyZo;
float roll = 0,pitch = 0,rollgy = 0,pitchgy = 0,rollac = 0,pitchac = 0,Ax,Ay,Az,Gx,Gy,Gz,gain = 0.95;
void MPUconfig(int Addr,int data)
{
  Wire.beginTransmission(MPU);
  Wire.write(Addr);
  Wire.write(data);
  Wire.endTransmission();
}
void MPUread()
  {
    Wire.beginTransmission(MPU);
    Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
    Wire.endTransmission();
    Wire.requestFrom(MPU,14);  // request a total of 14 registers
    AcX=Wire.read()<<8|Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)    
    AcY=Wire.read()<<8|Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
    AcZ=Wire.read()<<8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
    tmp=Wire.read()<<8|Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)    
    GyX=Wire.read()<<8|Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
    GyY=Wire.read()<<8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
    GyZ=Wire.read()<<8|Wire.read();
  }
void offset()
{
  MPUconfig(0x1A,0b00000000);
  int ax = 0, ay = 0,az = 0,gx = 0,gy = 0,gz = 0,i;
MPUread();
MPUread();
ax = AcX;
ay = AcY;
az = AcZ;
gx = GyX;
gy = GyY;
gz = GyZ;
for(i=0;i<1100;i++)
{
    MPUread();
    if(i>100)
    {
      ax = (ax+AcX)/2;
      ay = (ay+AcY)/2;
      az = (az+AcZ)/2;
      gx = (gx+GyX)/2;
      gy = (gy+GyY)/2;
      gz = (gz+GyZ)/2;
    } 
    delay(2);
 }
AcXo = ax;
AcYo = ay;
AcZo = 16384-az;
GyXo = gx;
GyYo = gy;
GyZo = gz;
MPUconfig(0x1A,0b00000110);
}
void setup() 
{ 
  pinMode(ledPin, OUTPUT);
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  pinMode(A2, INPUT);
  esc1.attach(5); //Specify the esc signal pin,Here as D8
  esc2.attach(6);
  esc3.attach(10);
  esc4.attach(11);
  pump.attach(3); // pump
  esc1.writeMicroseconds(1000); //initialize the signal to 1000
  esc2.writeMicroseconds(1000);
  esc3.writeMicroseconds(1000);
  esc4.writeMicroseconds(1000);
  Serial.begin(115200);
  Wire.begin();
  MPUconfig(0x1A,0b00000110);
  MPUconfig(0x1B,0b00000000);
  MPUconfig(0x1C,0b00000000);
  MPUconfig(0x6B,0b00000000);
  offset();
  EspSerial.begin(ESP8266_BAUD);
  delay(10);
  for (int i = 0; i < 4; i++) {
    targetSpeed[i] = 0;
  }
  Blynk.begin(auth, wifi, ssid, pass);
}
BLYNK_WRITE(V3) {
 
  x = param.asInt();
  x = map(x, 0, 1023, 1000, 2000); //mapping val to minimum and maximum(Change if needed)
  
}
BLYNK_WRITE(V2) {
 
  pitch_roll = param.asInt();
}
BLYNK_WRITE(V1) {
  
  int x = param[0].asInt();        
  int y = param[1].asInt();
  int tempSpeed[4];

  if(x == -1 && y == 0) //roll left
  {
    tempSpeed[0] = actSpeed[0];
    tempSpeed[1] = actSpeed[1] + pitch_roll;
    tempSpeed[2] = actSpeed[2] + pitch_roll;
    tempSpeed[3] = actSpeed[3]; 
  }
  else if(x  == 1 && y == 0) // roll right
   {
    
    tempSpeed[0] = actSpeed[0] + pitch_roll;
    tempSpeed[1] = actSpeed[1];
    tempSpeed[2] = actSpeed[2];
    tempSpeed[3] = actSpeed[3] + pitch_roll;
    } 
  else if (x == 0 && y == -1)// pitch back
  {
    tempSpeed[0] = actSpeed[0] + pitch_roll;
    tempSpeed[1] = actSpeed[1] + pitch_roll;
    tempSpeed[2] = actSpeed[2];
    tempSpeed[3] = actSpeed[3];
    }
    else if (x == 0 && y == 1)// pitch forward
  {
    tempSpeed[0] = actSpeed[0];
    tempSpeed[1] = actSpeed[1];
    tempSpeed[2] = actSpeed[2] + pitch_roll;
    tempSpeed[3] = actSpeed[3] + pitch_roll;
    }
   else {
    tempSpeed[2] = actSpeed[2];
    tempSpeed[3] = actSpeed[3];
    tempSpeed[0] = actSpeed[0];
    tempSpeed[1] = actSpeed[1];
    }
    runIndividual (tempSpeed);
    delay(500);
}
BLYNK_WRITE(V4) {
 
  Amode = param.asInt();
}
void stabilise (int* currSpeed, int* actSpeed, float rollDiff, float pitchDiff) {
  if( x > 1050)
  {
  actSpeed[0] = (int) currSpeed[0] + (rollDiff) - (pitchDiff);  //each motor has actual Speed and speed at which we want them to fly...
  actSpeed[1] = (int) currSpeed[1] + (rollDiff) + (pitchDiff);
  actSpeed[2] = (int) currSpeed[2] - (rollDiff) + (pitchDiff);  //actual Speed is calculated as follows +- half rollDiff +- half pitchDiff
  actSpeed[3] = (int) currSpeed[3] - (rollDiff) - (pitchDiff);
  }
  else
  {
  actSpeed[0] = (int) currSpeed[0] ;  //each motor has actual Speed and speed at which we want them to fly...
  actSpeed[1] = (int) currSpeed[1] ;
  actSpeed[2] = (int) currSpeed[2] ;  //actual Speed is calculated as follows +- half rollDiff +- half pitchDiff
  actSpeed[3] = (int) currSpeed[3] ;
  }
  for (int i = 0; i < 4; i ++) {
    if (actSpeed[i] < 0 )
      actSpeed[i] = 0;
  }
}

void runIndividual (int* actSpeed) {
   esc1.writeMicroseconds(actSpeed[0]);//5
   esc2.writeMicroseconds(actSpeed[1]);//6
   esc3.writeMicroseconds(actSpeed[2]);//10
   esc4.writeMicroseconds(actSpeed[3]);//11
  Serial.print(actSpeed[0]);
  Serial.print(" ");
  Serial.print(actSpeed[1]);
  Serial.print(" ");
  Serial.print(actSpeed[2]);
  Serial.print(" ");
  Serial.print(actSpeed[3]);
  Serial.println(" ");
}
void loop()
{  
  Blynk.run();
  for (int i =0;i<4;i++) {
    
    targetSpeed[i] = x;
  
  }
  t = millis();
  MPUread();
  Ax = (float)(AcX-AcXo)/16384;
  Ay = (float)(AcY-AcYo)/16384;
  Az = (float)(AcZ-AcZo)/16384;
  Gx = (float)(GyX-GyXo)/131;
  Gy = (float)(GyY-GyYo)/131;
  Gz = (float)(GyZ-GyZo)/131;
  pitchgy = (Gy * ((float) dt/1000)) + pitch;
  rollgy = (Gx * ((float) dt/1000)) + roll;
  pitchac = atan2(Ax,Az) * (float)(180/PI);
  rollac =  atan2(Ay,Az) * (float) (180/PI);
  roll = gain * rollgy + (1-gain)* rollac;
  pitch = gain * pitchgy + (1-gain) * pitchac; 
  Serial.print(roll);
  Serial.print(" ");
  Serial.print(pitch);
  Serial.print(" ");
  Serial.print(x);
  Serial.println(" ");
  dt = millis()-t;
  //--------------callibration------------------
  if(x == 0){
    pitch_cal = pitch;
    roll_cal = roll;
    }
   //-------------------------------------------
    stabilise (targetSpeed, actSpeed, roll - roll_cal, pitch - pitch_cal);
  runIndividual (actSpeed);
  int L,R;
  int tempSpeed[4],p;
  L = analogRead(A0);
  R = analogRead(A1);
  Serial.print(L);
  Serial.print(" ");
  Serial.println(R);
  p = analogRead(A2);
  //p = map(p, 0, 720, 0, 1023);
  Serial.println(p);
  if ( p > 700 )
  {
    pump.write(p);
  }
  //if ( Amode == 1){
  if ( Amode == 1 && L > 600 && R < 600){
    tempSpeed[0] = actSpeed[0];
    tempSpeed[1] = actSpeed[1] + pitch_roll;
    tempSpeed[2] = actSpeed[2] + pitch_roll;
    tempSpeed[3] = actSpeed[3];
    runIndividual (tempSpeed);
    delay(100);
  }
   else if ( Amode == 1 && L < 600 && R > 600){
    tempSpeed[0] = actSpeed[0] + pitch_roll;
    tempSpeed[1] = actSpeed[1];
    tempSpeed[2] = actSpeed[2];
    tempSpeed[3] = actSpeed[3] + pitch_roll;
    runIndividual (tempSpeed);
    delay(100);
  }
  else if ( Amode == 1 ) {
    tempSpeed[0] = actSpeed[0];
    tempSpeed[1] = actSpeed[1];
    tempSpeed[2] = actSpeed[2] + pitch_roll;
    tempSpeed[3] = actSpeed[3] + pitch_roll;
    runIndividual (tempSpeed);
    delay(100);
  }
  //}
  if ( ! Blynk.connected() )
  {
    while(actSpeed[0] > 0 || actSpeed[1] > 0 || actSpeed[2] > 0 || actSpeed[3] > 0)
    {
      
        actSpeed[0] = actSpeed[0] - 5;
        actSpeed[1] = actSpeed[0] - 5;
        actSpeed[2] = actSpeed[0] - 5;
        actSpeed[3] = actSpeed[0] - 5;

      Serial.print(actSpeed[0]);
      Serial.print(" ");
      Serial.print(actSpeed[1]);
      Serial.print(" ");
      Serial.print(actSpeed[2]);
      Serial.print(" ");
      Serial.print(actSpeed[3]);
      Serial.println(" ");
      delay(500);
      runIndividual (actSpeed);
    }
    x=0;
  }
  //Amode = 0;
}
//end
